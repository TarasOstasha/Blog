import React, { useEffect, useState } from 'react';
import { connect } from 'react-redux';
import { AppDispatch, RootState } from '../../store';
import { getUsersThunk } from '../../store/slices/usersSlice';
import { PayloadAction } from '@reduxjs/toolkit';
import { FetchError } from '../../interfaces';
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  CircularProgress,
  Typography,
  Button,
  TablePagination,
} from '@mui/material';

interface UserListProps {
  users: User[];
  isFetching: boolean;
  error: FetchError | null;
  getUsers: () => void;
}

interface User {
  id: string;
  name: string;
  email: string;
  role: string;
}

const UserList: React.FC<UserListProps> = ({
  users,
  isFetching,
  error,
  getUsers,
}) => {
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(5);

  useEffect(() => {
    getUsers();
  }, [getUsers]);

  const handleChangePage = (event: unknown, newPage: number) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  const handleDelete = (id: string) => {
    // Implement delete logic here
    console.log(`Delete user with id: ${id}`);
  };

  const handleUpdate = (id: string) => {
    // Implement update logic here
    console.log(`Update user with id: ${id}`);
  };

  if (isFetching) {
    return <CircularProgress />;
  }

  if (error) {
    return <Typography color="error">Error: {error.errors}</Typography>;
  }
  return (
    <Paper>
      <TableContainer>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>ID</TableCell>
              <TableCell>Name</TableCell>
              <TableCell>Email</TableCell>
              <TableCell>Permissions</TableCell>
              <TableCell>Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {users
              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
              .map((user) => (
                <TableRow key={user.id}>
                  <TableCell>{user.id}</TableCell>
                  <TableCell>{user.name}</TableCell>
                  <TableCell>{user.email}</TableCell>
                  <TableCell>{user.role}</TableCell>
                  <TableCell>
                    <Button
                      variant="contained"
                      color="primary"
                      onClick={() => handleUpdate(user.id)}
                      sx={{ marginRight: 1 }}
                    >
                      Update
                    </Button>
                    <Button
                      variant="contained"
                      color="secondary"
                      onClick={() => handleDelete(user.id)}
                    >
                      Delete
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
          </TableBody>
        </Table>
      </TableContainer>
      <TablePagination
        component="div"
        count={users.length}
        page={page}
        onPageChange={handleChangePage}
        rowsPerPage={rowsPerPage}
        onRowsPerPageChange={handleChangeRowsPerPage}
        rowsPerPageOptions={[5, 10, 25]}
      />
    </Paper>
  );
};

const mapStateToProps = ({ usersList }: RootState) => ({
  ...usersList,
});

const mapDispatchToProps = (dispatch: AppDispatch) => ({
  getUsers: () => dispatch(getUsersThunk()),
  //deleteUser: id => dispatch(deleteUserThunk(id)),
  //getUsersTask: () => dispatch(getUserTasksThunk()),
});

export default connect(mapStateToProps, mapDispatchToProps)(UserList);